import pandas as pd
import numpy as np
import cvxpy as cp
import matplotlib.pyplot as plt

# 데이터 로드
der = pd.read_csv("C:/Users/symply_jina/Desktop/seohyun/UIC4801/der.csv")
der['datetime_beginning_ept'] = pd.to_datetime(der['datetime_beginning_ept'], format='%m/%d/%Y %I:%M:%S %p')

# 주요 변수 설정
I = list(range(0, 15))  # DER 수
T = list(range(len(der.groupby(der['datetime_beginning_ept'].dt.hour).groups.keys())))  # 시간대 수 (24시간)
S = list(range(len(der.groupby(der['datetime_beginning_ept'].dt.date).groups.keys())))  # 날짜별 시나리오 인덱스

# 전일 시장 가격 (Day-ahead) 및 실시간 시장 가격 (Real-time)
P_DA = {t: sum(der['system_energy_price_da'].iloc[t + s * len(T)] for s in S) / len(S) for t in T}
P_RT = {(t, s): der['system_energy_price_rt'].iloc[t + s * len(T)] for t in T for s in S}

# 패널티 비용 계산
P_PN = {(t, s): max(P_DA[t], P_RT[(t, s)]) * 2 for t in T for s in S}

# 시나리오 확률 계산
prob = {s: 1 / len(S) for s in S}

# DER 발전량 데이터 생성 (시간대 및 시나리오별 변동 포함)
np.random.seed(17)
R = {
    (i, t, s): max(
        0,
        10 + 5 * np.random.normal(0, 1)
    )
    for i in I for t in T for s in S
}

# ============================
# Case 1: DER 개별 운용 모델
# ============================
x_DA_1 = {(i, t): cp.Variable(pos=True) for i in I for t in T}
y_plus_1 = {(i, t, s): cp.Variable(pos=True) for i in I for t in T for s in S}
y_minus_1 = {(i, t, s): cp.Variable(pos=True) for i in I for t in T for s in S}

# Case 1 목적함수
obj_case1 = sum(
    P_DA[t] * x_DA_1[i, t] for i in I for t in T
) + sum(
    prob[s] * (P_RT[t, s] * y_plus_1[i, t, s] - P_PN[t, s] * y_minus_1[i, t, s])
    for i in I for t in T for s in S
)

# Case 1 제약조건
constraints_case1 = []
for i in I:
    for t in T:
        for s in S:
            constraints_case1.append(R[i, t, s] - x_DA_1[i, t] == y_plus_1[i, t, s] - y_minus_1[i, t, s])

# 이진 변수로 y+와 y-의 동시 발생 방지
M = 10000
z_case1 = {(i, t, s): cp.Variable(boolean=True) for i in I for t in T for s in S}
for i in I:
    for t in T:
        for s in S:
            constraints_case1.append(y_plus_1[i, t, s] <= M * z_case1[i, t, s])
            constraints_case1.append(y_minus_1[i, t, s] <= M * (1 - z_case1[i, t, s]))

# ==============================
# Case 2: 집합 운용 모델
# ==============================
x_DA_2 = {(i, t): cp.Variable(pos=True) for i in I for t in T}
y_plus_2 = {(i, t, s): cp.Variable(pos=True) for i in I for t in T for s in S}
y_minus_2 = {(i, t, s): cp.Variable(pos=True) for i in I for t in T for s in S}
alpha_DA = {t: cp.Variable(pos=True) for t in T}
beta_plus = {(t, s): cp.Variable(pos=True) for t in T for s in S}
beta_minus = {(t, s): cp.Variable(pos=True) for t in T for s in S}

# Case 2 목적함수
obj_case2 = sum(
    P_DA[t] * alpha_DA[t] for t in T
) + sum(
    prob[s] * (P_RT[t, s] * beta_plus[t, s] - P_PN[t, s] * beta_minus[t, s])
    for t in T for s in S
)

# Case 2 제약조건
constraints_case2 = []
for i in I:
    for t in T:
        for s in S:
            constraints_case2.append(R[i, t, s] - x_DA_2[i, t] == y_plus_2[i, t, s] - y_minus_2[i, t, s])

for t in T:
    constraints_case2.append(alpha_DA[t] == sum(x_DA_2[i, t] for i in I))
    for s in S:
        constraints_case2.append(sum(R[i, t, s] for i in I) - alpha_DA[t] == beta_plus[t, s] - beta_minus[t, s])
        constraints_case2.append(beta_plus[t, s] - beta_minus[t, s] == sum(y_plus_2[i, t, s] - y_minus_2[i, t, s] for i in I))

# 이진 변수로 y+, y-, beta+ 및 beta-의 동시 발생 방지
z_case2 = {(i, t, s): cp.Variable(boolean=True) for i in I for t in T for s in S}
z_beta = {(t, s): cp.Variable(boolean=True) for t in T for s in S}
for i in I:
    for t in T:
        for s in S:
            constraints_case2.append(y_plus_2[i, t, s] <= M * z_case2[i, t, s])
            constraints_case2.append(y_minus_2[i, t, s] <= M * (1 - z_case2[i, t, s]))
for t in T:
    for s in S:
        constraints_case2.append(beta_plus[t, s] <= M * z_beta[t, s])
        constraints_case2.append(beta_minus[t, s] <= M * (1 - z_beta[t, s]))

# =========================
# 문제 정의 및 최적화 실행
# =========================
prob_case1 = cp.Problem(cp.Maximize(obj_case1), constraints_case1)
prob_case2 = cp.Problem(cp.Maximize(obj_case2), constraints_case2)

# 풀이 실행
prob_case1.solve(solver='GUROBI')
prob_case2.solve(solver='GUROBI')

# 결과 출력
print("Case 1 최적해:")
print(f"총 이익: {prob_case1.value}")

print("Case 2 최적해:")
print(f"총 이익: {prob_case2.value}")

# i별 평균 commitment 계산
print("\n각 DER별 하루 평균 commitment 분석:")
for i in I:
    # Case 1 평균값 계산
    case1_commitment = sum(x_DA_1[i,t].value for t in T)
    
    # Case 2 평균값 계산
    case2_commitment = sum(x_DA_2[i,t].value for t in T)
    
    print(f"\nDER {i}:")
    print(f"  Case 1 평균 commitment: {case1_commitment:.2f} MW")
    print(f"  Case 2 평균 commitment: {case2_commitment:.2f} MW")
    print(f"  차이 (Case 2 - Case 1): {(case2_commitment - case1_commitment):.2f} MW")

# i별 평균 profit 계산
print("\n각 DER별 하루 평균 profit 분석:")
for i in I:
    # Case 1 profit 계산
    case1_profit = sum(
        P_DA[t] * x_DA_1[i,t] for t in T
    ) + sum(
        prob[s] * (P_RT[t, s] * y_plus_1[i,t,s] - P_PN[t, s] * y_minus_1[i,t,s])
        for t in T for s in S
    )
    
    # Case 2 profit 계산  
    case2_profit = sum(
        P_DA[t] * x_DA_2[i,t] for t in T
    ) + sum(
        prob[s] * (P_RT[t, s] * y_plus_2[i,t,s] - P_PN[t, s] * y_minus_2[i,t,s])
        for t in T for s in S
    )
    
    print(f"\nDER {i}:")
    print(f"  Case 1 평균 profit: {case1_profit.value:.2f}")
    print(f"  Case 2 평균 profit: {case2_profit.value:.2f}")
    print(f"  차이 (Case 2 - Case 1): {(case2_profit.value - case1_profit.value):.2f}")
# Case 1과 Case 2의 총 profit 검증
print("\n총 Profit 검증:")

# Case 1 총 profit 계산 (i별 평균 profit의 합)
case1_total_profit = sum(
    (sum(P_DA[t] * x_DA_1[i,t] for t in T) + 
    sum(prob[s] * (P_RT[t,s] * y_plus_1[i,t,s] - P_PN[t,s] * y_minus_1[i,t,s])
        for t in T for s in S)).value
    for i in I
)

# Case 2 총 profit 계산 (i별 평균 profit의 합)
case2_total_profit = sum(
    (sum(P_DA[t] * x_DA_2[i,t] for t in T) + 
    sum(prob[s] * (P_RT[t,s] * y_plus_2[i,t,s] - P_PN[t,s] * y_minus_2[i,t,s])
        for t in T for s in S)).value
    for i in I
)

print(f"Case 1:")
print(f"  개별 DER profit 합계: {case1_total_profit:.2f}")
print(f"  목적함수 값: {prob_case1.value:.2f}")
print(f"  차이: {abs(case1_total_profit - prob_case1.value):.10f}")

print(f"\nCase 2:")
print(f"  개별 DER profit 합계: {case2_total_profit:.2f}")
print(f"  목적함수 값: {prob_case2.value:.2f}") 
print(f"  차이: {abs(case2_total_profit - prob_case2.value):.10f}")

